AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A cloudformation template to create a step function to manage the rotation of the AWS SES SMTP credential across a number of hosts
Parameters:

  SecretName:
    Type: String
    Description: How to name the secret in the secret store
    Default: SESSendSecret

  IAMUserName:
    Type: String
    Description: How to name the IAM User in the IAM console
    Default: SESSendUser

  KMSKeyID:
    Type: String
    Description: Optional KMS Key ID to use to encrypt the secret rather than the default
    Default: None

  SESSendingResourceCondition:
    Type: String
    Description: The condition to apply to the SES IAM policy
    AllowedValues:
      - configuration-set
      - identity

  SESSendingResourceValue:
    Type: String
    Description: The resource to limit the IAM polcy condition to

  ConfirmationEmailAddress:
    Type: String
    Description: The email address to send the confirmation emails to

Resources:

  SESIAMUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: !Ref IAMUserName
      Policies: 
        - PolicyName: AmazonSesSendingAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: Allow
                  Action:
                  - 'ses:SendRawEmail'
                  Resource: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:${SESSendingResourceCondition}/${SESSendingResourceValue}

  SESIAMUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref SESIAMUser

  SecretProcessorCustomResourceTrigger:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt SecretProcessorFunction.Arn
      SecretUsername: !Ref SESIAMUserKey
      SecretPassword: !GetAtt SESIAMUserKey.SecretAccessKey
      SecretName: !Ref SecretName
      KMSKey: !Ref KMSKeyID
  
  SecretProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ses_credential_custom_resource_calculator/
      Handler: lambda_function.handler
      Role: !GetAtt SecretProcessorFunctionRole.Arn
      Runtime: python3.10
      Timeout: 15
      Architectures:
        - arm64

  SecretProcessorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretManagerAndParamStorePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SSMParameterStorePermissions
                Effect: Allow
                Action:
                    - ssm:DeleteParameter
                    - ssm:PutParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SecretName}
              - Effect: Allow
                Action: 'kms:Encrypt'
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKeyID}

  # State machine that manages the overall credential rotation it:
  # Create a new access key
  # Reads a list of servers
  # Starts a state machine to confirm rotation is complete on each server 
  # Deletes the old access key
  CredentialRotationLambdaStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt CredentialRotationLambdaStateMachineExecutionRole.Arn
      DefinitionString:
        Fn::Sub: 
          - |-
            {
              "Comment": "A state machine to manage the offline rotation of an AWS SES SMTP Credential",
              "StartAt": "Create New Access Key for SES User",
              "States": {
                "Create New Access Key for SES User": {
                  "Type": "Task",
                  "Next": "Generate SMTP Credential",
                  "Parameters": {
                    "UserName": "${IAMUserName}"
                  },
                  "ResultSelector": {
                    "NewAccessKey": {
                      "NewAccessKeyId.$": "$.AccessKey.AccessKeyId"
                    },
                    "SecretAccessKey.$": "$.AccessKey.SecretAccessKey",
                    "AccessKeyId.$": "$.AccessKey.AccessKeyId"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:iam:createAccessKey"
                },
                "Generate SMTP Credential": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "${SMTPCredentialGeneratorFunctionArn}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Update Parameter Store value",
                  "ResultPath": "$.LambdaOutput",
                  "ResultSelector": {
                    "Payload.$": "$.Payload"
                  }
                },
                "Update Parameter Store value": {
                  "Type": "Task",
                  "Next": "Get list of servers to update",
                  "Parameters": {
                    "Name": "${SecretName}",
                    "Value.$": "$.LambdaOutput.Payload",
                    "Type": "SecureString",
                    "Overwrite": "True"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter",
                  "ResultPath": null,
                  "OutputPath": "$.NewAccessKey"
                },
                "Get list of servers to update": {
                  "Type": "Task",
                  "Parameters": {
                    "TableName": "${DynamoDBTableName}"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
                  "Next": "For each server, send an email to change the password",
                  "ResultPath": "$.ServerList"
                },
                "For each server, send an email to change the password": {
                  "Type": "Map",
                  "ItemProcessor": {
                    "ProcessorConfig": {
                      "Mode": "INLINE"
                    },
                    "StartAt": "Call the Manual Confirmation step function for this server",
                    "States": {
                      "Call the Manual Confirmation step function for this server": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::states:startExecution",
                        "Parameters": {
                          "StateMachineArn": "${ManualConfirmationLambdaStateMachine}",
                          "Input": {
                            "Server.$": "$.TargetServer",
                            "ConfirmationLink": "TEST",
                            "SecretLocation": "TEST",
                            "ConfirmationEmailSNSTopic": "${ConfirmationEmailSNSTopic}",
                            "APIGWEndpoint": "https://${ConfirmationApi}.execute-api.${AWS::Region}.amazonaws.com/states",
                            "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                          },
                          "Name.$": "States.Format('{}-{}', $$.Execution.Name, $.TargetServer)"
                        },
                        "Next": "Wait a day to check for confirmation"
                      },
                      "Wait a day to check for confirmation": {
                        "Type": "Wait",
                        "Next": "Check status of confirmation step function for this server",
                        "Seconds": 86400
                      },
                      "Check status of confirmation step function for this server": {
                        "Type": "Task",
                        "Next": "Confirm Success status?",
                        "Parameters": {
                          "ExecutionArn.$": "$.ExecutionArn"
                        },
                        "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution"
                      },
                      "Confirm Success status?": {
                        "Type": "Choice",
                        "Choices": [
                          {
                            "Variable": "$.Status",
                            "StringEquals": "SUCCEEDED",
                            "Next": "Secret Rotation Confirmed"
                          }
                        ],
                        "Default": "Wait a day to check for confirmation"
                      },
                      "Secret Rotation Confirmed": {
                        "Type": "Pass",
                        "End": true
                      }
                    }
                  },
                  "ItemsPath": "$.ServerList.Items",
                  "Next": "List all access keys",
                  "ItemSelector": {
                    "NewAccessKeyId.$": "$.NewAccessKeyId",
                    "TargetServer.$": "$$.Map.Item.Value.Server.S"
                  },
                  "ResultPath": "$.MapOutput"
                },
                "List all access keys": {
                  "Type": "Task",
                  "Parameters": {
                    "UserName": "${IAMUserName}"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:iam:listAccessKeys",
                  "Next": "Find the old Access Key",
                  "ResultPath": "$.KeyList"
                },
                "Find the old Access Key": {
                  "Type": "Map",
                  "ItemProcessor": {
                    "ProcessorConfig": {
                      "Mode": "INLINE"
                    },
                    "StartAt": "Check if key matches new key Id",
                    "States": {
                      "Check if key matches new key Id": {
                        "Type": "Choice",
                        "Choices": [
                          {
                            "Not": {
                              "Variable": "$.NewAccessKeyId",
                              "StringEqualsPath": "$.ListedAccessKeyId"
                            },
                            "Next": "Deactivate Access Key"
                          }
                        ],
                        "Default": "Pass"
                      },
                      "Deactivate Access Key": {
                        "Type": "Task",
                        "Next": "Wait 3 days",
                        "Parameters": {
                          "UserName": "${IAMUserName}",
                          "AccessKeyId.$": "$.ListedAccessKeyId",
                          "Status": "Inactive"
                        },
                        "Resource": "arn:aws:states:::aws-sdk:iam:updateAccessKey",
                        "ResultPath": null
                      },
                      "Wait 3 days": {
                        "Type": "Wait",
                        "Next": "Delete Old Access Key",
                        "Seconds": 259200
                      }, 
                      "Delete Old Access Key": {
                        "Type": "Task",
                        "End": true,
                        "Parameters": {
                          "UserName": "${IAMUserName}",
                          "AccessKeyId.$": "$.ListedAccessKeyId"
                        },
                        "Resource": "arn:aws:states:::aws-sdk:iam:deleteAccessKey"
                      },
                      "Pass": {
                        "Type": "Pass",
                        "End": true
                      }
                    }
                  },
                  "End": true,
                  "ItemsPath": "$.KeyList.AccessKeyMetadata",
                  "ItemSelector": {
                    "NewAccessKeyId.$": "$.NewAccessKeyId",
                    "ListedAccessKeyId.$": "$$.Map.Item.Value.AccessKeyId"
                  }
                }
              }
            }
          - DynamoDBTableName: !Ref AWSSESRotationDynamoDBTable
            SMTPCredentialGeneratorFunctionArn: !GetAtt SMTPCredentialGeneratorFunction.Arn
              
  # Role to execute the state machine
  CredentialRotationLambdaStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CredentialRotationLambdaStateMachinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:UpdateAccessKey
                Resource:
                  - "*"
              - Effect: Allow
                Action: dynamodb:Scan
                Resource:
                  - !GetAtt AWSSESRotationDynamoDBTable.Arn
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref ManualConfirmationLambdaStateMachine
              - Effect: Allow
                Action: states:DescribeExecution
                Resource: !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${ManualConfirmationLambdaStateMachine.Name}:*"
              - Effect: Allow
                Action: ssm:PutParameter
                Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SecretName}"
              - Effect: Allow
                Action: kms:Encrypt
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKeyID}"
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt SMTPCredentialGeneratorFunction.Arn

  AWSSESRotationDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "Server"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "Server"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  ManualConfirmationLambdaStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt ManualConfirmationLambdaStateMachineExecutionRole.Arn
      DefinitionString:
        Fn::Sub: |
          {
              "StartAt": "Send Credential Change Request",
              "States": {
                  "Send Credential Change Request": {
                      "Type": "Task",
                      "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                      "Parameters": {
                        "FunctionName": "${ConfirmationEmailLambdaFunction.Arn}",
                        "Payload": {
                          "ExecutionContext.$": "$$"
                        }
                      },
                      "End": true
                  }
              }
          }

  ManualConfirmationLambdaStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeCallbackLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "${ConfirmationEmailLambdaFunction.Arn}"

  
  ConfirmationEmailSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref ConfirmationEmailAddress
          Protocol: email

  ConfirmationEmailLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rotation_notifier/
      Handler: lambda_function.handler
      Role: !GetAtt ConfirmationEmailLambdaExecutionRole.Arn
      Runtime: python3.10
      Timeout: 15
      Architectures:
        - arm64
          
  ConfirmationEmailLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: SNSSendEmailPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "SNS:Publish"
                Resource: !Ref ConfirmationEmailSNSTopic
  
  ConfirmationApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "Confirmation endpoint"
      Description: "API to record confirmation for a Step Function Step"
      FailOnWarnings: true

  ConfirmationResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ConfirmationApi
      ParentId: !GetAtt "ConfirmationApi.RootResourceId"
      PathPart: execution

  ConfirmationMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmationLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: "'text/html'"
            ResponseTemplates:
              text/html: $input.path('$')
        RequestTemplates:
          application/json: |
            {
              "body" : $input.json('$'),
              "headers": {
                #foreach($header in $input.params().header.keySet())
                "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                #end
              },
              "method": "$context.httpMethod",
              "params": {
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end

                #end
              },
              "query": {
                #foreach($queryParam in $input.params().querystring.keySet())
                "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end

                #end
              }  
            }
      ResourceId: !Ref ConfirmationResource
      RestApiId: !Ref ConfirmationApi
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayCloudWatchLogsRole.Arn"
  
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"

  ExecutionApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ConfirmationApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref ConfirmationApi
      StageName: states

  ConfirmationApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ConfirmationMethod
    Properties:
      RestApiId: !Ref ConfirmationApi
      StageName: DummyStage

  ConfirmationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: notification_callback/
      Handler: lambda_function.handler
      Role: !GetAtt "ConfirmationLambdaFunctionRole.Arn"
      Runtime: python3.10
      Timeout: 15
      Architectures:
        - arm64  
        
  ConfirmationLambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "ConfirmationLambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ConfirmationApi}/*"

  ConfirmationLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:SendTaskSuccess"
                Resource: !Ref ManualConfirmationLambdaStateMachine

  StarterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: step_function_starter/
      Handler: lambda_function.handler
      Role: !GetAtt "StarterLambdaFunctionRole.Arn"
      Runtime: python3.10
      Timeout: 15
      Architectures:
        - arm64  
      Environment:
        Variables:
          StepFunctionArn: !Ref CredentialRotationLambdaStateMachine

  StarterLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: !Ref CredentialRotationLambdaStateMachine

  RotationScheduler:
    Type: AWS::Scheduler::Schedule
    Properties: 
      Description: Event Bridge scheduler to start the rotation step function on the last day of every 3rd month
      ScheduleExpression: "cron(0 0 L 1/3 ? *)"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target: 
        Arn: !GetAtt StarterLambdaFunction.Arn 
        RoleArn: !GetAtt RotationSchedulerRole.Arn

  RotationSchedulerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "scheduler.amazonaws.com"
      Policies:
        - PolicyName: LambdaInvokePermission
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "Lambda:InvokeFunction"
                Resource: !GetAtt StarterLambdaFunction.Arn

  SMTPCredentialGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ses_credential_calculator/
      Handler: lambda_function.handler
      Role: !GetAtt SMTPCredentialGeneratorFunctionRole.Arn
      Runtime: python3.10
      Timeout: 15
      Architectures:
        - arm64

  SMTPCredentialGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  ServerDynamoTable:
    Description: The name of the table to list the servers this credential should be rotated in
    Value: !Ref AWSSESRotationDynamoDBTable
  RotationScheduler:
    Description: The name of the EventBridge Scheduler created to initate a credential rotation task
    Value: !Ref RotationScheduler 