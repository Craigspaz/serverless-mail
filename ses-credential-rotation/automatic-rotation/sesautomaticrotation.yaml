AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A cloudformation template to create a lambda and SSM Document to automatically rotate the SES SMTP secret
Parameters:

  SecretName:
    Type: String
    Description: How to name the secret in the secret store
    Default: SESSendSecret

  IAMUserName:
    Type: String
    Description: How to name the IAM User in the IAM console
    Default: SESSendUser

  MaximumSecretAgeInDays:
    Type: String
    Description: Maximum number of days old the secret can be before it is rotated
    Default: 30

  KmsKeyID:
    Type: String
    Description: Optional Kms Key ID to use to encrypt the secret rather than the default
    Default: None

  SESSendingResourceCondition:
    Type: String
    Description: The condition to apply to the SES IAM policy
    AllowedValues:
      - configuration-set
      - identity

  SESSendingResourceValue:
    Type: String
    Description: The resource to limit the IAM polcy condition to

  SSMRotationDocument:
    Type: String
    Description: The name of the SSM document to execute to rotate the SES SMTP credentials on a host

  SSMServerTag:
    Type: String
    Description: The tag name to identify which servers to execute the SSM document against
  
  SSMServerTagValue:
    Type: String
    Description: The tag value to identify which servers to execute the SSM document against

Conditions:
  CustomKmsKey: !Not [ !Equals [!Ref KmsKeyID, None]]

Resources:
  SESIAMUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: !Ref IAMUserName
      Policies: 
        - PolicyName: AmazonSesSendingAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: Allow
                  Action:
                  - 'ses:SendRawEmail'
                  Resource: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:${SESSendingResourceCondition}/${SESSendingResourceValue}

  SecretManagerSecret: 
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SecretName
      KmsKeyId: 
        !If [CustomKmsKey, !Ref KmsKeyID, !Ref "AWS::NoValue"]


  SecretManagerSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretsManagerInvokePermission
    Properties:
      RotateImmediatelyOnUpdate: True
      RotationLambdaARN: !GetAtt SESSecretRotationFunction.Arn
      RotationRules: 
        AutomaticallyAfterDays: !Ref MaximumSecretAgeInDays
      SecretId: !Ref SecretManagerSecret

  SESSecretRotationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../ses_credential_rotator/
      Handler: lambda_function.handler
      Role: !GetAtt SESSecretRotationFunctionRole.Arn
      Runtime: python3.10
      Timeout: 75
      Architectures:
        - arm64
      Environment:
        Variables:
          SMTP_IAM_USER_NAME: !Ref IAMUserName
          SMTP_ENDPOINT: !Sub email-smtp.${AWS::Region}.amazonaws.com
          SSM_ROTATION_DOCUMENT: !Ref SSMRotationDocument
          SSM_SERVER_TAG: !Ref SSMServerTag
          SSM_SERVER_TAG_VALUE: !Ref SSMServerTagValue

  SESSecretRotationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretManagerandIAMPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SecretManagerPermissions
                Effect: Allow
                Action:
                    - secretsmanager:DescribeSecret
                    - secretsmanager:PutSecretValue
                    - secretsmanager:GetSecretValue
                    - secretsmanager:UpdateSecretVersionStage
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}-*
              - Sid: IAMPermissions
                Effect: Allow
                Action:
                    - iam:CreateAccessKey
                    - iam:DeleteAccessKey
                Resource: !GetAtt SESIAMUser.Arn
              - Sid: SSMPermissions
                Effect: Allow
                Action: 
                    - ssm:SendCommand
                Resource: 
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${SSMRotationDocument}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Sid: SSMCheckPermissions
                Effect: Allow
                Action: 
                    - ssm:ListCommandInvocations
                    - ssm:GetCommandInvocation
                Resource: '*'
            
  SecretsManagerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref SESSecretRotationFunction
      Principal: secretsmanager.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}

  ExamplePostfixRotationSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: "Example SSM document to update the Amazon SES credentials configure in Postfix"
        parameters:
          SESUsername:
            type: "String"
            description: "Key of SES IAM User Authorised to send emails"
          SESPassword:
            type: "String"
            description: "Password of SES IAM User Authorised to send emails"
        mainSteps:
        - action: "aws:runShellScript"
          name: "backupcredentialsfile"
          inputs:
            runCommand:
            - "cp /etc/postfix/sasl_passwd /etc/postfix/sasl_passwd-`date +\"%s\"`"
        - action: "aws:runShellScript"
          name: "createnewcredsfile"
          inputs:
            runCommand:
            - "echo `cut -f1 -d' ' /etc/postfix/sasl_passwd` {{ SESUsername }}:{{ SESPassword }} > /etc/postfix/sasl_passwd"
        - action: "aws:runShellScript"
          name: "runpostmap"
          inputs:
            runCommand:
            - "postmap /etc/postfix/sasl_passwd"
        - action: "aws:runShellScript"
          name: "restartpostfix"
          inputs:
            runCommand:
            - "systemctl restart postfix"
      DocumentFormat: YAML
      DocumentType: Command
      Name: 'ExamplePostfixSESpasswordrotator'

  ExampleWindowsRotationSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: "Example SSM document to update the Amazon SES credentials configure in Windows IIS SMTP Server"
        parameters:
          SESUsername:
            type: "String"
            description: "Key of SES IAM User Authorised to send emails"
          SESPassword:
            type: "String"
            description: "Password of SES IAM User Authorised to send emails"
        mainSteps:
        - action: "aws:runPowerShellScript"
          name: "RotatePassword"
          inputs:
            runCommand:
            - "$smtpconfig = (Get-WmiObject -Namespace root/MicrosoftIISv2 -class iissmtpserversetting)"
            - "$smtpconfig.RouteUsername = \"{{ SESUsername }}\""
            - "$smtpconfig.RoutePassword = \"{{ SESPassword }}\""
            - "$smtpconfig.Put()"
        - action: "aws:runPowerShellScript"
          name: "RestartSMTPservice"
          inputs:
            runCommand:
            - "([ADSI]'IIS://LOCALHOST/SMTPSVC/1').Stop()"
            - "([ADSI]'IIS://LOCALHOST/SMTPSVC/1').Start()"
      DocumentFormat: YAML
      DocumentType: Command
      Name: 'ExampleWindowsIISSMTPSESpasswordrotator'

Outputs:
  SecretRotationLambda:
    Description: The name of the Lambda used for the secret rotation
    Value: !Ref SESSecretRotationFunction